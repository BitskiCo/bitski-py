# generated by datamodel-codegen:
#   filename:  cova_openapi.json
#   timestamp: 2021-08-16T07:19:31+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class BinaryArrayList1(BaseModel):
    empty: Optional[bool] = None


class BinaryArrayList(BaseModel):
    __root__: Union[List[List[str]], BinaryArrayList1]


class DecodedParamItem(BaseModel):
    name: Optional[str] = Field(None, description="The name of the parameter.")
    type: Optional[str] = Field(None, description="The type of the parameter.")
    indexed: Optional[bool] = Field(None, description="The index of the parameter.")
    decoded: Optional[bool] = Field(
        None, description="The decoded value of the parameter."
    )
    value: Optional[Dict[str, Any]] = Field(
        None, description="The value of the parameter."
    )


class _RawLogTopicsBytes(BaseModel):
    empty: Optional[bool] = None


class Pagination(BaseModel):
    has_more: Optional[bool] = Field(
        None, description="`true` if we can  paginate to get more data."
    )
    page_number: Optional[int] = Field(
        None, description="The specific page being returned."
    )
    page_size: Optional[int] = Field(
        None, description="The number of results per page."
    )
    total_count: Optional[int] = Field(None, description="Total number of entries.")


class ExternalNftMetadata(BaseModel):
    name: Optional[str] = Field(None, description="The Name of the NFT.")
    description: Optional[str] = Field(
        None, description="The Description or Bio of the NFT."
    )
    image: Optional[str] = Field(None, description="The Image URL of the NFT.")
    image_256: Optional[str] = Field(
        None, description="The Image URL of the NFT resized to 256x256."
    )
    image_512: Optional[str] = Field(
        None, description="The Image URL of the NFT resized to 512x512."
    )
    image_1024: Optional[str] = Field(
        None, description="The Image URL of the NFT resized to 1024x1024."
    )
    animation_url: Optional[str] = Field(
        None, description="The Animation URL of the NFT."
    )
    external_url: Optional[str] = Field(
        None, description="The External URL of the NFT."
    )
    attributes: Optional[Dict[str, Any]] = Field(
        None, description="Array of additional attributes of the NFT."
    )
    owner: Optional[str] = Field(None, description="The owner of the NFT.")


class NftMetadataWithOwner(BaseModel):
    token_id: Optional[int] = Field(None, description="The ID of the NFT.")
    token_balance: Optional[int] = Field(
        None, description="The count of the number of NFTs with this ID."
    )
    token_url: Optional[str] = Field(
        None, description="External URL for additional metadata."
    )
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    token_price_wei: Optional[int] = Field(
        None, description="The latest price value on chain of the token ID."
    )
    token_quote_rate_eth: Optional[str] = Field(
        None,
        description="The latest quote_rate of the token ID denominated in unscaled ETH.",
    )
    original_owner: Optional[str] = Field(
        None, description="The address of the original owner of this NFT."
    )
    external_data: Optional[ExternalNftMetadata] = None
    owner: Optional[str] = Field(None, description="The current owner of this NFT.")
    owner_address: Optional[str] = Field(
        None, description="The address of the current owner of this NFT."
    )
    burned: Optional[bool] = Field(
        None, description="When set to true, this NFT has been Burned."
    )


class WalletBalanceItem(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    type: Optional[str] = Field(
        None, description="One of `cryptocurrency`, `stablecoin`, `nft` or `dust`."
    )
    balance: Optional[int] = Field(
        None,
        description="The asset balance. Use `contract_decimals` to scale this balance for display purposes.",
    )
    balance_24h: Optional[int] = Field(
        None, description="The asset balance 24 hours ago."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )
    quote_rate_24h: Optional[float] = Field(
        None,
        description="The spot exchange rate in `quote-currency` as of 24 hours ago.",
    )
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    quote_24h: Optional[float] = Field(
        None,
        description="The current balance converted to fiat in `quote-currency` as of 24 hours ago.",
    )
    nft_data: Optional[List[NftMetadataWithOwner]] = Field(
        None, description="Array of NFTs that are held under this contract."
    )


class OHLC(BaseModel):
    balance: Optional[int] = Field(
        None,
        description="The asset balance. Use `contract_decimals` to scale this balance for display purposes.",
    )
    quote: Optional[float] = Field(
        None,
        description="The historical balance converted to fiat in `quote-currency`.",
    )


class OHLCTimestampedItem(BaseModel):
    timestamp: Optional[datetime] = Field(
        None, description="Portfolio value at given timestamp"
    )
    quote_rate: Optional[float] = Field(
        None, description="The historical spot exchange rate in `quote-currency`."
    )
    open: Optional[OHLC] = None
    high: Optional[OHLC] = None
    low: Optional[OHLC] = None
    close: Optional[OHLC] = None


class TokenTransferItem(BaseModel):
    block_signed_at: Optional[datetime] = Field(
        None, description="The signed time of the block."
    )
    tx_hash: Optional[str] = Field(None, description="The transaction hash.")
    from_address: Optional[str] = Field(
        None, description="The address where the transfer is from."
    )
    from_address_label: Optional[str] = Field(
        None, description="The label of `from` address."
    )
    to_address: Optional[str] = Field(
        None, description="The address where the transfer is to."
    )
    to_address_label: Optional[str] = Field(
        None, description="The label of `to` address."
    )
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    transfer_type: Optional[str] = Field(None, description="IN/OUT.")
    delta: Optional[float] = Field(
        None, description="The delta attached to this transfer."
    )
    balance: Optional[float] = Field(
        None,
        description="The transfer balance. Use `contract_decimals` to scale this balance for display purposes.",
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )
    delta_quote: Optional[float] = Field(
        None, description="The current delta converted to fiat in `quote-currency`."
    )
    balance_quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )


class UniswapToken(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    balance: Optional[int] = Field(None, description="Current balance.")
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )


class UniswapTokenWithSupply(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    balance: Optional[int] = Field(None, description="Current balance.")
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )
    total_supply: Optional[int] = Field(
        None, description="Total supply of this pool token."
    )


class UniswapV2BalanceItem(BaseModel):
    token_0: Optional[UniswapToken] = None
    token_1: Optional[UniswapToken] = None
    pool_token: Optional[UniswapTokenWithSupply] = None


class Act(Enum):
    ADD_LIQUIDITY = "ADD_LIQUIDITY"
    REMOVE_LIQUIDITY = "REMOVE_LIQUIDITY"
    SWAP = "SWAP"


class SushiswapToken(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    balance: Optional[int] = Field(None, description="Current balance.")
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )


class SushiswapTokenWithSupply(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    balance: Optional[int] = Field(None, description="Current balance.")
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )
    total_supply: Optional[int] = Field(
        None, description="Total supply of this pool token."
    )


class AaveBalanceItemV2(BaseModel):
    atoken_contract_address: Optional[str] = Field(
        None, description="Smart contract address."
    )
    atoken_contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    atoken_contract_name: Optional[str] = Field(
        None, description="Smart contract name."
    )
    atoken_contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    atoken_balance: Optional[int] = Field(None, description="Current balance.")
    asset_contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    asset_contract_address: Optional[str] = Field(
        None, description="Smart contract address."
    )
    asset_contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    liquidity_rate: Optional[float] = Field(
        None, description="The current supply rate."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    borrow_balance: Optional[int] = Field(
        None, description="The current borrow balance."
    )
    borrow_rate: Optional[float] = Field(None, description="The current borrow rate.")
    borrow_quote: Optional[float] = Field(
        None, description="The current borrow balance in `quote_currency`."
    )
    origination_fee: Optional[int] = Field(
        None,
        description="The percentage of the loan amount collected on loan origination.",
    )


class AaveV2BorrowPosition(BaseModel):
    borrowed: Optional[str] = Field(None, description="Borrow statement.")
    balance: Optional[int] = Field(None, description="Current balance.")
    balance_quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    apr: Optional[float] = Field(None, description="Borrow annual percentage rate.")


class AaveV2SupplyPosition(BaseModel):
    supplied: Optional[str] = Field(None, description="Supply statement.")
    balance: Optional[int] = Field(None, description="Current balance.")
    balance_quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    apy: Optional[float] = Field(None, description="Supply annual percentage yield.")


class FarmToken(BaseModel):
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    balance: Optional[int] = Field(None, description="Current balance.")
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )


class FarmTokenWithClaimable(BaseModel):
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    balance: Optional[int] = Field(None, description="Current balance.")
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )
    claimable_farm: Optional[int] = Field(
        None, description="Current amount of claimable `FARM`."
    )
    total_supply: Optional[int] = Field(
        None, description="Total supply of this pool token."
    )
    claim_rate: Optional[float] = Field(
        None, description="The current exchange rate for `FARM` in `quote-currency`."
    )
    reward_quote: Optional[float] = Field(
        None,
        description="The current balance of `claimable FARM` converted to fiat in `quote-currency`.",
    )


class HarvestFarmingStake(BaseModel):
    lp_token: Optional[FarmToken] = None
    lp_underlying: Optional[FarmToken] = None
    pool_token: Optional[FarmTokenWithClaimable] = None


class HarvestPoolCollection(BaseModel):
    farm_token: Optional[FarmToken] = None
    stakes: Optional[List[HarvestFarmingStake]] = None


class SushiToken(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    balance: Optional[int] = Field(None, description="Current balance.")
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )


class SushiTokenWithSupply(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals."
    )
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    balance: Optional[int] = Field(None, description="Current balance.")
    quote: Optional[float] = Field(
        None, description="The current balance converted to fiat in `quote-currency`."
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )
    total_supply: Optional[int] = Field(
        None, description="Total supply of this pool token."
    )


class SushiswapFarmingStake(BaseModel):
    pool_share: Optional[float] = Field(None, description="Total share of this pool.")
    total_value: Optional[float] = Field(
        None,
        description="Current total value of liquidity provided, converted to fiat in `quote-currency`.",
    )
    claimable_sushi: Optional[int] = Field(
        None, description="Current amount of claimable `SUSHI`."
    )
    claimable_sushi_quote: Optional[float] = Field(
        None,
        description="The current balance of `claimable SUSHI` converted to fiat in `quote-currency`.",
    )
    balance: Optional[str] = Field(None, description="Current balance.")
    token_0: Optional[SushiToken] = None
    token_1: Optional[SushiToken] = None
    pool_token: Optional[SushiTokenWithSupply] = None


class SushiswapPoolCollection(BaseModel):
    sushi_token: Optional[SushiToken] = None
    stakes: Optional[List[SushiswapFarmingStake]] = None


class UniswapFarmingStake(BaseModel):
    token_0: Optional[UniswapToken] = None
    token_1: Optional[UniswapToken] = None
    pool_token: Optional[UniswapTokenWithSupply] = None


class UniswapPoolCollection(BaseModel):
    uniswap_token: Optional[UniswapToken] = None
    stakes: Optional[List[UniswapFarmingStake]] = None


class CompoundToken(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = None
    balance: Optional[int] = None
    interest_accrued: Optional[int] = None
    balance_quote: Optional[float] = None
    interest_accrued_quote: Optional[float] = None
    quote_rate: Optional[float] = None
    apr: Optional[float] = None


class CompoundActivity(BaseModel):
    act_at: Optional[datetime] = None
    tx_hash: Optional[str] = None
    act: Optional[str] = None
    description: Optional[str] = None
    amount: Optional[float] = None
    ctoken_amount: Optional[float] = None
    contract_address: Optional[str] = None
    contract_logo_url: Optional[str] = None
    contract_decimals: Optional[int] = None
    ctoken_contract_decimals: Optional[int] = None
    contract_ticker_symbol: Optional[str] = None
    ctoken_contract_ticker_symbol: Optional[str] = None
    quote_rate: Optional[float] = None
    quote: Optional[float] = None
    successful: Optional[bool] = None
    gas_offered: Optional[int] = None
    gas_spent: Optional[int] = None
    gas_price: Optional[int] = None
    gas_quote: Optional[float] = None


class CompoundActivityResponse(BaseModel):
    address: Optional[str] = Field(None, description="The requested wallet address.")
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    next_update_at: Optional[datetime] = Field(
        None, description="The next updated time."
    )
    quote_currency: Optional[str] = Field(
        None, description="The requested fiat currency."
    )
    chain_id: Optional[int] = Field(None, description="The requested chain ID.")
    items: Optional[List[CompoundActivity]] = Field(
        None, description="The transactions."
    )
    pagination: Optional[Pagination] = None


class TokenHolder(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    address: Optional[str] = Field(None, description="The address of token holder.")
    balance: Optional[float] = Field(None, description="The balance of token holder.")
    total_supply: Optional[int] = Field(
        None, description="The total supply of the holder."
    )
    block_height: Optional[int] = Field(None, description="The height of the block.")


class TokenHolderResponse(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[TokenHolder]] = None
    pagination: Optional[Pagination] = None


class TokenHolderDiff(BaseModel):
    token_holder: Optional[str] = Field(None, description="The token holder.")
    prev_balance: Optional[float] = Field(
        None, description="The starting block balance."
    )
    prev_block_height: Optional[int] = Field(
        None, description="The starting block height."
    )
    next_balance: Optional[float] = Field(None, description="The ending block balance.")
    next_block_height: Optional[int] = Field(
        None, description="The ending block height."
    )
    diff: Optional[float] = Field(None, description="The difference of the balance.")


class NFTMetaDataRsponseType(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[WalletBalanceItem]] = None
    pagination: Optional[Pagination] = None


class ContractMetadata(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")


class TokenIdResponse(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    token_id: Optional[int] = Field(
        None, description="The list of token ids under the contract address."
    )


class TokenIdResponseType(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[TokenIdResponse]] = None
    pagination: Optional[Pagination] = None


class TokenV2(BaseModel):
    contract_address: Optional[str] = None
    contract_name: Optional[str] = None
    volume_in_24h: Optional[float] = None
    volume_out_24h: Optional[float] = None
    quote_rate: Optional[float] = None
    reserve: Optional[int] = None
    logo_url: Optional[str] = None
    contract_ticker_symbol: Optional[str] = None
    contract_decimals: Optional[int] = None
    volume_in_7d: Optional[float] = None
    volume_out_7d: Optional[float] = None


class Token(BaseModel):
    contract_address: Optional[str] = None
    contract_name: Optional[str] = None
    volume_in_24h: Optional[float] = None
    volume_out_24h: Optional[float] = None
    quote_rate: Optional[float] = None
    reserve: Optional[int] = None
    logo_url: Optional[str] = None
    contract_ticker_symbol: Optional[str] = None
    contract_decimals: Optional[int] = None


class ContractMetadataWithPrices(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )


class CompoundAssetInfo(BaseModel):
    ctoken: Optional[ContractMetadataWithPrices] = None
    underlying: Optional[ContractMetadataWithPrices] = None
    borrow_apr: Optional[float] = None
    supply_apr: Optional[float] = None


class CompoundAssetResponse(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[CompoundAssetInfo]] = None
    pagination: Optional[Pagination] = None


class AaveAssetInfo(BaseModel):
    underlying: Optional[ContractMetadataWithPrices] = None
    atoken: Optional[ContractMetadata] = None
    variable_borrow_apr: Optional[float] = Field(
        None, description="Variable-borrow annual percentage rate."
    )
    stable_borrow_apr: Optional[float] = Field(
        None, description="Stable-borrow annual percentage rate."
    )
    supply_apy: Optional[float] = Field(
        None, description="Supply annual percentage yield."
    )
    lending_pool_contract: Optional[str] = Field(
        None, description="The main contract of the Aave v1 protocol."
    )
    lending_pool_core_contract: Optional[str] = Field(
        None, description="The main core contract of the Aave v1 protocol."
    )


class AaveAssetsResponse(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[AaveAssetInfo]] = None
    pagination: Optional[Pagination] = None


class MarketItemAffiliate(BaseModel):
    market_address: Optional[str] = None
    affiliate_fee: Optional[int] = None


class Block(BaseModel):
    signed_at: Optional[datetime] = Field(
        None, description="The signed time of the block."
    )
    height: Optional[int] = Field(None, description="The height of the block.")


class SingleBlockResponse(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[Block]] = None
    pagination: Optional[Pagination] = None


class GenericChainInfoDisplay(BaseModel):
    name: Optional[str] = Field(None, description="Name of chain")
    chain_id: Optional[str] = Field(
        None,
        description="Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
    )
    is_testnet: Optional[bool] = None
    db_schema_name: Optional[str] = None
    label: Optional[str] = None
    logo_url: Optional[str] = None


class GenericChainInfoStatusDisplay(BaseModel):
    name: Optional[str] = Field(None, description="Name of chain")
    chain_id: Optional[str] = Field(
        None,
        description="Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
    )
    is_testnet: Optional[bool] = None
    logo_url: Optional[str] = None
    synced_block_height: Optional[int] = Field(
        None, description="The height of the block."
    )
    synced_blocked_signed_at: Optional[datetime] = None


class TickerPriceItemWithRank(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )
    rank: Optional[int] = Field(None, description="Market cap rank.")


class TickerPriceResponseType(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[TickerPriceItemWithRank]] = None
    pagination: Optional[Pagination] = None


class VolatilityItem(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    stddev_1h: Optional[float] = Field(None, description="1h price standard deviation")
    stddev_2h: Optional[float] = Field(None, description="2h price standard deviation")
    stddev_4h: Optional[float] = Field(None, description="4h price standard deviation")
    stddev_8h: Optional[float] = Field(None, description="8h price standard deviation")
    stddev_16h: Optional[float] = Field(
        None, description="16h price standard deviation"
    )
    stddev_24h: Optional[float] = Field(
        None, description="24h price standard deviation"
    )
    quote_rate: Optional[float] = Field(
        None, description="The current spot exchange rate in `quote-currency`."
    )


class HistoricalPriceItem(BaseModel):
    contract_metadata: Optional[ContractMetadata] = None
    date: Optional[date] = None
    price: Optional[float] = None


class BalancerTokenWithSupplyAndFee(BaseModel):
    balance: Optional[int] = None
    contract_address: Optional[str] = None
    logo_url: Optional[str] = None
    contract_ticker_symbol: Optional[str] = None
    contract_decimals: Optional[int] = None
    quote: Optional[float] = None
    quote_rate: Optional[float] = None
    total_supply: Optional[int] = None
    swap_fee: Optional[float] = None


class BalancerTokenWithWeight(BaseModel):
    balance: Optional[int] = None
    contract_address: Optional[str] = None
    logo_url: Optional[str] = None
    contract_ticker_symbol: Optional[str] = None
    contract_decimals: Optional[int] = None
    quote: Optional[float] = None
    quote_rate: Optional[float] = None
    weight: Optional[float] = None


class ContractMetadataWithBalance(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    balance: Optional[int] = None
    quote: Optional[float] = None
    quote_rate: Optional[float] = None


class ContractMetadataWithBalanceSupply(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    balance: Optional[int] = None
    supply: Optional[int] = None
    fee: Optional[int] = None


class CBalance(BaseModel):
    pool: Optional[ContractMetadataWithBalanceSupply] = None
    underlying: Optional[List[ContractMetadataWithBalance]] = None


class AaveBalanceItem(BaseModel):
    atoken_contract_address: Optional[str] = None
    atoken_contract_ticker_symbol: Optional[str] = None
    atoken_contract_name: Optional[str] = None
    atoken_contract_decimals: Optional[int] = None
    atoken_balance: Optional[int] = None
    borrow_balance: Optional[int] = None
    borrow_rate: Optional[float] = None
    liquidity_rate: Optional[float] = None
    origination_fee: Optional[int] = None
    peg_contract_decimals: Optional[int] = None
    peg_contract_address: Optional[str] = None
    peg_contract_ticker_symbol: Optional[str] = None
    logo_url: Optional[str] = None
    quote_rate: Optional[float] = None
    quote: Optional[float] = None
    borrow_quote: Optional[float] = None


class ContainerA(BaseModel):
    balances: Optional[List[AaveBalanceItem]] = None


class Container(BaseModel):
    balances: Optional[List[UniswapV2BalanceItem]] = None


class UniswapBalanceWrapper(BaseModel):
    balances: Optional[List[UniswapV2BalanceItem]] = None


class Act1(Enum):
    ADD_LIQUIDITY = "ADD_LIQUIDITY"
    REMOVE_LIQUIDITY = "REMOVE_LIQUIDITY"
    SWAP = "SWAP"


class UniswapV2ActivityItem(BaseModel):
    act_at: datetime
    act: Act1
    description: str
    tx_hash: str
    token_0: Optional[UniswapToken] = None
    token_1: Optional[UniswapToken] = None
    pool_token: Optional[UniswapTokenWithSupply] = None


class DecodedItem(BaseModel):
    name: Optional[str] = Field(None, description="The name of the decoded item.")
    signature: Optional[str] = Field(
        None, description="The signature of the decoded item."
    )
    params: Optional[List[DecodedParamItem]] = Field(
        None, description="The parameters of the decoded item."
    )


class LogEventItem(BaseModel):
    block_signed_at: Optional[datetime] = Field(
        None, description="The signed time of the block."
    )
    block_height: Optional[int] = Field(None, description="The height of the block.")
    tx_offset: Optional[int] = Field(None, description="The transaction offset.")
    log_offset: Optional[int] = Field(None, description="The log offset.")
    tx_hash: Optional[str] = Field(None, description="The transaction hash.")
    _raw_log_topics_bytes: Optional[Union[List[List[str]], _RawLogTopicsBytes]] = None
    raw_log_topics: Optional[List[str]] = None
    sender_contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    sender_name: Optional[str] = Field(None, description="Smart contract name.")
    sender_contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    sender_address: Optional[str] = Field(
        None, description="The address of the sender."
    )
    sender_address_label: Optional[str] = Field(
        None, description="The label of the sender address."
    )
    sender_logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    raw_log_data: Optional[str] = Field(None, description="The log events in raw.")
    decoded: Optional[DecodedItem] = None


class BalanceResponseType(BaseModel):
    address: Optional[str] = None
    updated_at: Optional[datetime] = None
    next_update_at: Optional[datetime] = None
    quote_currency: Optional[str] = None
    uniswap_v2: Optional[UniswapBalanceWrapper] = None


class HistoricalPortfolioResponse(BaseModel):
    address: Optional[str] = Field(None, description="The requested wallet address.")
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    next_update_at: Optional[datetime] = Field(
        None, description="The next updated time."
    )
    quote_currency: Optional[str] = Field(
        None, description="The requested fiat currency."
    )
    chain_id: Optional[int] = Field(None, description="The requested chain ID.")
    items: Optional[List[OHLCTimestampedItem]] = Field(
        None, description="List of tokens in portfolio"
    )
    pagination: Optional[Pagination] = None


class BlockTransactionWithContractTransfers(BaseModel):
    block_signed_at: Optional[datetime] = Field(
        None, description="The signed time of the block."
    )
    block_height: Optional[int] = Field(None, description="The height of the block.")
    tx_hash: Optional[str] = Field(None, description="The transaction hash.")
    tx_offset: Optional[int] = Field(None, description="The transaction offset.")
    successful: Optional[bool] = Field(None, description="The transaction status.")
    from_address: Optional[str] = Field(
        None, description="The address where the transaction is from."
    )
    from_address_label: Optional[str] = Field(
        None, description="The label of `from` address."
    )
    to_address: Optional[str] = Field(
        None, description="The address where the transaction is to."
    )
    to_address_label: Optional[str] = Field(
        None, description="The label of `to` address."
    )
    value: Optional[float] = Field(None, description="The value attached to this tx.")
    value_quote: Optional[float] = Field(
        None, description="The value attached in `quote-currency` to this tx."
    )
    gas_offered: Optional[int] = Field(None, description="The gas offered for this tx.")
    gas_spent: Optional[int] = Field(None, description="The gas spent for this tx.")
    gas_price: Optional[int] = Field(
        None, description="The gas price at the time of this tx."
    )
    gas_quote: Optional[float] = Field(
        None, description="The gas spent in `quote-currency` denomination."
    )
    gas_quote_rate: Optional[float] = Field(
        None, description="Historical ETH price at the time of tx."
    )
    transfers: Optional[List[TokenTransferItem]] = Field(
        None, description="Transfer items."
    )


class TransferResponse(BaseModel):
    address: Optional[str] = Field(None, description="The requested wallet address.")
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    next_update_at: Optional[datetime] = Field(
        None, description="The next updated time."
    )
    quote_currency: Optional[str] = Field(
        None, description="The requested fiat currency."
    )
    chain_id: Optional[int] = Field(None, description="The requested chain ID.")
    items: Optional[List[BlockTransactionWithContractTransfers]] = Field(
        None, description="The transactions."
    )
    pagination: Optional[Pagination] = None


class ContainerU(BaseModel):
    balances: Optional[List[UniswapV2BalanceItem]] = None


class ActivityResponse(BaseModel):
    address: Optional[str] = Field(None, description="The requested wallet address.")
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    next_update_at: Optional[datetime] = Field(
        None, description="The next updated time."
    )
    quote_currency: Optional[str] = Field(
        None, description="The requested fiat currency."
    )
    chain_id: Optional[int] = Field(None, description="The requested chain ID.")
    items: Optional[List[UniswapV2ActivityItem]] = Field(
        None, description="The transactions."
    )
    pagination: Optional[Pagination] = None


class SushiswapActivityItem(BaseModel):
    act_at: datetime
    act: Act
    description: str
    tx_hash: str
    token_0: Optional[SushiswapToken] = None
    token_1: Optional[SushiswapToken] = None
    pool_token: Optional[SushiswapTokenWithSupply] = None


class AaveV2BalanceItemWithPositions(BaseModel):
    balance: Optional[AaveBalanceItemV2] = None
    supply_position: Optional[AaveV2SupplyPosition] = None
    borrow_position: Optional[AaveV2BorrowPosition] = None


class AaveV2BalanceResponseItem(BaseModel):
    address: Optional[str] = Field(None, description="The requested wallet address.")
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    next_update_at: Optional[datetime] = Field(
        None, description="The next updated time."
    )
    quote_currency: Optional[str] = Field(
        None, description="The requested fiat currency."
    )
    chain_id: Optional[int] = Field(None, description="The requested chain ID.")
    items: Optional[List[AaveV2BalanceItemWithPositions]] = Field(
        None, description="The transactions."
    )
    pagination: Optional[Pagination] = None


class FarmingStatsItem(BaseModel):
    harvest_stats: Optional[HarvestPoolCollection] = None
    uniswap_stats: Optional[UniswapPoolCollection] = None
    sushiswap_stats: Optional[SushiswapPoolCollection] = None


class FarmingStatsResponseItem(BaseModel):
    address: Optional[str] = Field(None, description="The requested wallet address.")
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    next_update_at: Optional[datetime] = Field(
        None, description="The next updated time."
    )
    quote_currency: Optional[str] = Field(
        None, description="The requested fiat currency."
    )
    chain_id: Optional[int] = Field(None, description="The requested chain ID.")
    items: Optional[List[FarmingStatsItem]] = Field(
        None, description="The transactions."
    )
    pagination: Optional[Pagination] = None


class CompoundBalanceItem(BaseModel):
    account_address: Optional[str] = None
    source: Optional[str] = None
    supply_tokens: Optional[List[CompoundToken]] = None
    borrow_tokens: Optional[List[CompoundToken]] = None
    total_supply_eth: Optional[int] = None
    total_borrow_eth: Optional[int] = None
    total_collateral_eth: Optional[int] = None
    total_borrowing_power_eth: Optional[int] = None
    total_supply_eth_quote: Optional[float] = None
    total_borrow_eth_quote: Optional[float] = None
    total_collateral_eth_quote: Optional[float] = None
    total_borrowing_power_eth_quote: Optional[float] = None
    comp_accrued_quote: Optional[float] = None
    comp_balance_quote: Optional[float] = None
    comp_balance: Optional[int] = None
    comp_accrued: Optional[int] = None


class ContainerCo(BaseModel):
    balances: Optional[List[CompoundBalanceItem]] = None


class ExchangeVolumeV2(BaseModel):
    exchange: Optional[str] = None
    swap_count_24h: Optional[int] = None
    total_liquidity_quote: Optional[float] = None
    volume_24h_quote: Optional[float] = None
    fee_24h_quote: Optional[float] = None
    total_supply: Optional[int] = None
    quote_rate: Optional[float] = None
    block_height: Optional[int] = None
    token_0: Optional[TokenV2] = None
    token_1: Optional[TokenV2] = None
    chain_name: Optional[str] = None
    chain_id: Optional[str] = None
    dex_name: Optional[str] = None
    volume_7d_quote: Optional[float] = None
    annualized_fee: Optional[float] = None


class ExchangeVolume(BaseModel):
    exchange: Optional[str] = None
    swap_count_24h: Optional[int] = None
    total_liquidity_quote: Optional[float] = None
    volume_24h_quote: Optional[float] = None
    fee_24h_quote: Optional[float] = None
    total_supply: Optional[int] = None
    quote_rate: Optional[float] = None
    block_height: Optional[int] = None
    token_0: Optional[Token] = None
    token_1: Optional[Token] = None


class AaveV2AssetInfo(BaseModel):
    underlying: Optional[ContractMetadataWithPrices] = None
    atoken: Optional[ContractMetadata] = None
    variable_borrow_apr: Optional[float] = Field(
        None, description="Variable-borrow annual percentage rate."
    )
    stable_borrow_apr: Optional[float] = Field(
        None, description="Stable-borrow annual percentage rate."
    )
    supply_apy: Optional[float] = Field(
        None, description="Supply annual percentage yield."
    )
    lending_pool_contract: Optional[str] = Field(
        None, description="The main contract of the Aave v2 protocol."
    )
    lending_pool_addresses_provider: Optional[str] = Field(
        None, description="Addresses register of the protocol for a particular market."
    )
    lending_pool_addresses_provider_registry: Optional[str] = Field(
        None,
        description="A register of the active `lending_pool_addresses_provider` contracts, covering all markets.",
    )
    lending_pool_collateral_manager: Optional[str] = Field(
        None,
        description="Implements actions involving management of collateral in the protocol.",
    )
    lending_pool_configurator: Optional[str] = Field(
        None,
        description="Provides configuration functions for the LendingPool contracts.",
    )
    lending_rate_oracle: Optional[str] = Field(
        None,
        description="Holds the information needed to calculate and update the interest rates of specific reserves.",
    )
    price_oracle: Optional[str] = Field(
        None, description="The protocol price provider."
    )
    pool_admin: Optional[str] = Field(
        None, description="The pool administrator contract."
    )
    emergency_admin: Optional[str] = Field(
        None, description="The pool emergency administrator contract."
    )
    protocol_data_provider: Optional[str] = Field(
        None,
        description="To help integrators and developers more easily leverage the Aave v2 Protocol data and features.",
    )
    weth_gateway: Optional[str] = Field(
        None,
        description="A helper contract to easily wrap and unwrap ETH as necessary.",
    )
    collector_contract: Optional[str] = Field(
        None,
        description="The reserve factor allocates a share of the protocol's interests to this collector contract.",
    )


class AaveV2AssetsResponseItem(BaseModel):
    address: Optional[str] = Field(None, description="The requested wallet address.")
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    next_update_at: Optional[datetime] = Field(
        None, description="The next updated time."
    )
    quote_currency: Optional[str] = Field(
        None, description="The requested fiat currency."
    )
    chain_id: Optional[int] = Field(None, description="The requested chain ID.")
    items: Optional[List[AaveV2AssetInfo]] = Field(
        None, description="The transactions."
    )
    pagination: Optional[Pagination] = None


class UniswapExchangeListResponse(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[ExchangeVolume]] = None
    pagination: Optional[Pagination] = None


class AugurAffiliateResponseType(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[MarketItemAffiliate]] = None
    pagination: Optional[Pagination] = None


class EventsListResponseType(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[LogEventItem]] = None
    pagination: Optional[Pagination] = None


class AllChainInfoResponse(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[GenericChainInfoDisplay]] = None
    pagination: Optional[Pagination] = None


class ChainStatusResponse(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[GenericChainInfoStatusDisplay]] = None
    pagination: Optional[Pagination] = None


class PriceVolatilityResponseType(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[VolatilityItem]] = None
    pagination: Optional[Pagination] = None


class AddressWithHistoricalPricesItem(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    update_at: Optional[datetime] = None
    quote_currency: Optional[str] = None
    prices: Optional[List[HistoricalPriceItem]] = None


class AddressWithHistoricalPricesResponseType(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[AddressWithHistoricalPricesItem]] = None
    pagination: Optional[Pagination] = None


class BalancerBalanceItem(BaseModel):
    pool: Optional[BalancerTokenWithSupplyAndFee] = None
    assets: Optional[List[BalancerTokenWithWeight]] = None


class ContainerB(BaseModel):
    balances: Optional[List[BalancerBalanceItem]] = None


class ContainerC(BaseModel):
    curve: Optional[List[CBalance]] = None


class CurveBalanceResponseType(BaseModel):
    address: Optional[str] = None
    updated_at: Optional[datetime] = None
    next_update_at: Optional[datetime] = None
    quote_currency: Optional[str] = None
    balancer: Optional[ContainerC] = None


class AaveBalanceResponseType(BaseModel):
    address: Optional[str] = None
    updated_at: Optional[datetime] = None
    next_update_at: Optional[datetime] = None
    quote_currency: Optional[str] = None
    aave: Optional[ContainerA] = None


class BlockTransactionWithLogEvents(BaseModel):
    block_signed_at: Optional[datetime] = Field(
        None, description="The signed time of the block."
    )
    block_height: Optional[int] = Field(None, description="The height of the block.")
    tx_hash: Optional[str] = Field(None, description="The transaction hash.")
    tx_offset: Optional[int] = Field(None, description="The transaction offset.")
    successful: Optional[bool] = Field(None, description="The transaction status.")
    from_address: Optional[str] = Field(
        None, description="The address where the transaction is from."
    )
    from_address_label: Optional[str] = Field(
        None, description="The label of `from` address."
    )
    to_address: Optional[str] = Field(
        None, description="The address where the transaction is to."
    )
    to_address_label: Optional[str] = Field(
        None, description="The label of `to` address."
    )
    value: Optional[float] = Field(None, description="The value attached to this tx.")
    value_quote: Optional[float] = Field(
        None, description="The value attached in `quote-currency` to this tx."
    )
    gas_offered: Optional[int] = Field(None, description="The gas offered for this tx.")
    gas_spent: Optional[int] = Field(None, description="The gas spent for this tx.")
    gas_price: Optional[int] = Field(
        None, description="The gas price at the time of this tx."
    )
    gas_quote: Optional[float] = Field(
        None, description="The gas spent in `quote-currency` denomination."
    )
    gas_quote_rate: Optional[float] = Field(
        None, description="Historical ETH price at the time of tx."
    )
    log_events: Optional[List[LogEventItem]] = Field(
        None, description="The log events."
    )


class TransactionResponse(BaseModel):
    address: Optional[str] = Field(None, description="The requested wallet address.")
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    next_update_at: Optional[datetime] = Field(
        None, description="The next updated time."
    )
    quote_currency: Optional[str] = Field(
        None, description="The requested fiat currency."
    )
    chain_id: Optional[int] = Field(None, description="The requested chain ID.")
    items: Optional[List[BlockTransactionWithLogEvents]] = Field(
        None, description="The transactions."
    )
    pagination: Optional[Pagination] = None


class CompoundBalanceResponseType(BaseModel):
    address: Optional[str] = None
    updated_at: Optional[datetime] = None
    next_update_at: Optional[datetime] = None
    quote_currency: Optional[str] = None
    compound: Optional[ContainerCo] = None


class NftTransactionsResponse(BaseModel):
    contract_decimals: Optional[int] = Field(
        None, description="Smart contract decimals.", example=18
    )
    contract_name: Optional[str] = Field(None, description="Smart contract name.")
    contract_ticker_symbol: Optional[str] = Field(
        None, description="Smart contract ticker symbol."
    )
    contract_address: Optional[str] = Field(None, description="Smart contract address.")
    supports_erc: Optional[List[str]] = Field(
        None,
        description="The standard interface(s) supported for this token, eg: `ERC-20`.",
    )
    logo_url: Optional[str] = Field(None, description="Smart contract URL.")
    type: Optional[str] = Field(
        None, description="One of `cryptocurrency`, `stablecoin`, `nft` or `dust`."
    )
    nft_transactions: Optional[List[BlockTransactionWithLogEvents]] = Field(
        None, description="The nft transactions."
    )


class NftTransactionsResponseType(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[NftTransactionsResponse]] = None
    pagination: Optional[Pagination] = None


class SushiswapExchangeListResponse(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[ExchangeVolume]] = None
    pagination: Optional[Pagination] = None


class SingleTransactionResponse(BaseModel):
    updated_at: Optional[datetime] = Field(None, description="The updated time.")
    items: Optional[List[BlockTransactionWithLogEvents]] = None
    pagination: Optional[Pagination] = None


class BalancerBalanceResponseType(BaseModel):
    address: Optional[str] = None
    updated_at: Optional[datetime] = None
    next_update_at: Optional[datetime] = None
    quote_currency: Optional[str] = None
    balancer: Optional[ContainerB] = None
