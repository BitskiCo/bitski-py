{
  "openapi": "3.0.1",
  "info": {
    "title": "Covalent Blockchain Data API",
    "description": "\nWelcome to the Covalent API! Covalent provides a unified API to all assets secured by a blockchain network.\n\nThere are two classes of endpoints:\n* **Class A** - endpoints that return enriched blockchain data applicable to all blockchain networks, eg: balances, transactions, log events, etc.\n* **Class B** - endpoints that for a specific protocol on a blockchain, eg: AAVE is Ethereum-only and is not applicable to other blockchain networks.  \n\nThe most common query parameters:\n\nParameter | Default | Description\n--------- | ------- | -----------\nquote-currency | optional | One of `usd`, `cad`, `inr`, `eth`, `eur`. If not specified, use `usd`.\nformat | optional | One of `csv`, `json`. If not specified, use `json`\n\nThe supported quote currencies are:\n\nQuote currency|Symbol\n---|---\nUSD|$\nCAD|$\nEUR|€\nSGD|$\nINR|₹\nJPY|¥\nVND|₫\nCNY|¥\nKRW|₩\nRUB|₽\nTRY|₺\nETH|Ξ\nBNB|$\n\n\n## Introduction\n\nThe Covalent API is <a\nhref=\"http://en.wikipedia.org/wiki/Representational_state_transfer\">RESTful</a>.\nThe API is designed around the main resources that's available through the web\ninterface. Sample API calls are provided next to each method using `cURL`.\n\n\n## URL Patterns \n\n> API Host\n\n```shell\nhttps://api.covalenthq.com/v1/\n```\n\nSome points to keep in mind:\n\n- All requests are done over HTTPS (calls over plain HTTP will fail.)\n- The current version of the API is version 1.\n- The return format for all endpoints is JSON.\n- All requests require authentication.\n\n\n\n\n\n## Authentication\n\n\nTo access the Covalent API, you will need an API key. You can find your API key\nin the web interface. Various authentication mechanisms are available:\n\n### Query parameter\n\n```shell\n>>> curl -X GET https://api.covalenthq.com/v1/ENDPOINT/?key=API_KEY\n```\n\nSimply append `key=API_KEY` as a query parameter to all queries. \n\nThe main advantage of this method is to embed the API endpoints within\napplications that do not support more sophisticated auth mechanisms, like Google Sheets or as IFrames.\n\n### Basic Auth\n\n```shell\n>>> curl -X GET https://api.covalenthq.com/v1/ENDPOINT/ \\\n     -u API_KEY:\n     -H 'Content-Type: application/json'\n# The colon prevents curl from asking for a password.\n```\n\nProvide your API key as the basic auth username. You can find your API key in\nthe web interface. You do not need to provide a password.\n\n## Response format\n\n```json\n{\n  \"data\": {...},\n  \"error\": false,\n  \"error_message\": null,\n  \"error_code\": null\n}\n```\n\nBy default, we return JSON responses with the same shape for all endpoints. The\nmain keys are `data`, `error`, `error_message` and `error_code`.\n\nIf you specify a CSV response using the `format` parameter – it's possible to\ntoggle the headers on and off using the `format-options=noheader` parameter.\n\n## Supported Networks\n\nWe currently support the following networks:\n\n### Mainnets\nNetwork | chainId\n--------|--------\nEthereum|\t1\nPolygon/Matic|\t137\nAvalanche C-Chain|\t43114\nBinance Smart Chain|\t56\nFantom Opera|\t250\nRSK|\t30\nArbitrum|\t42161\nPalm|\t11297108109\n### Testnets\n\nNetwork\t|chainId\n--------|--------\nPolygon/Matic Mumbai|\t80001\nFuji C-Chain|\t43113\nKovan | 42\nBinance Smart Chain | 97\nMoonbase Alpha | 1287\nFantom | 4002\nRSK|\t31\nArbitrum|\t421611\nPalm|\t11297108099\n\nMore information available <a href=\"/docs/networks\" target=\"_blank\">here</a>.\n\n## Client libraries\n\nThough the Covalent REST API is idiomatic, for the best experience, we recommend\nusing one of the client libraries.\n\n### Cryptosheets \n\nIf you are an analyst you can use our API through [Cryptosheets](https://cryptosheets.com).\nCrypotsheets provide real-time streaming data into your worksheets. \nGlobal Parameters, Query Builder, Template Generator, Output Wizard.\nAvailable on Microsoft Appsource and Google GSuite.\n\n## Rate limiting\n\nNot enforced at present. Please let us know before you melt our servers!\n\n## Refresh rate\n\nWe classify the APIs as `real-time` (30s or 2 blocks) and `batch` (10m or 40 blocks).\n\n## Pagination\n\nCertain endpoints take two parameters: `page-size` and `page-number` implementing offset-limit pagination.\n\nParameter | Default | Description\n--------- | ------- | -----------\npage-size | 100 | Number of items in a single page\npage-number | 0 | Start with items on this page\n # Changelog\n\nAvailable <a href=\"/docs/changelog\">here</a>.\n",
    "version": "v1"
  },
  "paths": {
    "/v1/{chain_id}/block_v2/{block_height}/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get a block <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Retrieve a single block at `block_height`. If `block_height` is set to the value `latest`, return the latest block available.",
        "operationId": "getV1WithChain_idBlock_v2WithBlock_height",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "block_height",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SingleBlockResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/address/{address}/portfolio_v2/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get historical portfolio value over time <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Given chain_id and wallet address, return wallet value for the last 30 days at 24 hour timestamps. ",
        "operationId": "getV1WithChain_idAddressWithAddressPortfolio_v2",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoricalPortfolioResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/tokens/{contract_address}/nft_metadata/{token_id}/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get external NFT metadata <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Given a NFT contract address and a token ID, fetch and return the external metadata. \n\nBoth ERC721 as well as ERC1155 are supported.\n\nExample: https://gist.github.com/gane5h/e0e5f9ae2517d353324465d9cbe64ae9",
        "operationId": "getV1WithChain_idTokensWithContract_addressNft_metadataWithToken_id",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "contract_address",
            "in": "path",
            "description": "NFT contract address",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "token_id",
            "in": "path",
            "description": "The ID to the token",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NFTMetaDataRsponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/balancer/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Balancer exchange address balances <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Balancer exchange address balances.",
        "operationId": "getV11AddressWithAddressStacksBalancerBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalancerBalanceResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/uniswap_v2/acts/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Uniswap v2 address exchange liquidity transactions <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Uniswap v2 address exchange liquidity transactions.",
        "operationId": "getV11AddressWithAddressStacksUniswap_v2Acts",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "swaps",
            "in": "query",
            "description": "Get additional insight on swap event data related to this address, default: `false`",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ActivityResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/56/networks/pancakeswap_v2/assets/{address}/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Pancakeswap V2 network asset by address <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">batch</span>",
        "description": "Return detailed pool information for the specified pool `address`.",
        "operationId": "getV156NetworksPancakeswap_v2AssetsWithAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SushiswapExchangeListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/56/networks/pancakeswap/assets/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Pancakeswap network assets <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">batch</span>",
        "description": "Return a paginated list of Pancake pools sorted by exchange volume. Only pools with swaps in the last 24 hours are included.  \n\nHere's an example response: https://gist.github.com/gane5h/1c5e11a2a2f5e8555220c0b525b3d5c9",
        "operationId": "getV156NetworksPancakeswapAssets",
        "parameters": [
          {
            "name": "tickers",
            "in": "query",
            "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SushiswapExchangeListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/networks/aave_v2/assets/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Aave v2 network assets <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Aave v2 network assets.",
        "operationId": "getV1WithChain_idNetworksAave_v2Assets",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Supports `56` for BSC Mainnet and `137` for Polygon/Matic Mainnet, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveV2AssetsResponseItem"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/events/topics/{topic}/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get Log events by topic hash(es) <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Return a paginated list of decoded log events with one or more topic hashes separated by a comma. \n\nCheck out our topic hash calculator here:\nhttps://www.covalenthq.com/docs/tools/topic-calculator",
        "operationId": "getV1WithChain_idEventsTopicsWithTopic",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "topic",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "secondary-topics",
            "in": "query",
            "description": "Additional topic hash(es) to filter on -- only unpadded address fields supported right now",
            "schema": { "type": "string" }
          },
          {
            "name": "starting-block",
            "in": "query",
            "description": "Starting block to define a block range.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ending-block",
            "in": "query",
            "description": "Ending block to define a block range. Passing in `latest` uses the latest block height.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "sender-address",
            "in": "query",
            "description": "The address of the sender.",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsListResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/uniswap_v2/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Uniswap v2 address exchange balances <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Uniswap v2 address exchange balances.",
        "operationId": "getV11AddressWithAddressStacksUniswap_v2Balances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BalanceResponseType" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/address/{address}/transfers_v2/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get ERC20 token transfers <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get ERC20 token transfers. Passing in an `ENS` resolves automatically.",
        "operationId": "getV1WithChain_idAddressWithAddressTransfers_v2",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "contract-address",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransferResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/address/{address}/transactions_v2/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get transactions <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Retrieve all transactions for `address` including their decoded log events. This endpoint does a deep-crawl of the blockchain to retrieve all kinds of transactions that references the `address`. Take for example the address: `0x5a6d3b6bf795a3160dc7c139dee9f60ce0f00cae`, the endpoint returns the following transactions: \n\n|Description|Example|\n|---|---|\n|Failed transactions|[0x5545...da6c](https://etherscan.io/tx/0x5545b7005550851c2c19eb3e0f54adc2d46239504615e7008d1f20ec3cd0da6c/)|\n|ETH-only value transfers|[0x887f...93d0](https://etherscan.io/tx/0x887ffd61f7690de46293d2f4b4b2196df6e6bb4454a6f0e84a41a7033b9193d0)|\n|ERC20 transfer|[0xe936...ead7](https://etherscan.io/tx/0xe9363ca8d87c16660de9ef86ff04442eeea670157f016d4216975768ce5fead7)|\n",
        "operationId": "getV1WithChain_idAddressWithAddressTransactions_v2",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "block-signed-at-asc",
            "in": "query",
            "description": "Sort the transactions in chronological ascending order. By default, it's set to `false` and returns transactions in chronological descending order.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "no-logs",
            "in": "query",
            "description": "Setting this to `true` will omit decoded event logs, resulting in lighter and faster responses. By default it's set to `false`.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransactionResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/address/{address}/stacks/aave_v2/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Aave v2 address balances<span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Aave v2 address balances, supply and borrow positions.",
        "operationId": "getV1WithChain_idAddressWithAddressStacksAave_v2Balances",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Supports `56` for BSC Mainnet and `137` for Polygon/Matic Mainnet, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveV2BalanceResponseItem"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/address/{address}/stacks/sushiswap/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Sushiswap address exchange balances <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Sushiswap address exchange balances. Passing in an `ENS` resolves automatically. Here is an example response using Polygon/Matic `chain_id=137`: https://gist.github.com/adamwhitakerwilson/19cdc7249c88a41722038b2283c514e3",
        "operationId": "getV1WithChain_idAddressWithAddressStacksSushiswapBalances",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "description": "The requested wallet address.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BalanceResponseType" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/events/address/{address}/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get Log events by contract address <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Return a paginated list of decoded log events emiited by a particular smart contract. \n\nHere's an example of retrieving all Compound Governance events along with their decoded data, including proposals created/executed, votes cast, and so on:\nhttps://gist.github.com/gane5h/a117f507879e6a70bef1cc4240f3264d",
        "operationId": "getV1WithChain_idEventsAddressWithAddress",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "starting-block",
            "in": "query",
            "description": "Starting block to define a block range.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ending-block",
            "in": "query",
            "description": "Ending block to define a block range. Passing in `latest` uses the latest block height.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsListResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/aave_v2/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Aave v2 address balances<span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Aave v2 address balances, supply and borrow positions.",
        "operationId": "getV11AddressWithAddressStacksAave_v2Balances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Supports `56` for BSC Mainnet and `137` for Polygon/Matic Mainnet, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveV2BalanceResponseItem"
                }
              }
            }
          }
        }
      }
    },
    "/v1/1/networks/compound/assets/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Compound network assets <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Compound network assets.",
        "operationId": "getV11NetworksCompoundAssets",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompoundAssetResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/compound/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Compound address balances <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Compound address balances.",
        "operationId": "getV11AddressWithAddressStacksCompoundBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompoundBalanceResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/tokens/{contract_address}/nft_token_ids/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get NFT Token IDs <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Returns a list of all token IDs for a NFT contract on a blockchain network.",
        "operationId": "getV1WithChain_idTokensWithContract_addressNft_token_ids",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "contract_address",
            "in": "path",
            "description": "Smart contract address.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokenIdResponseType" }
              }
            }
          }
        }
      }
    },
    "/v1/1/networks/uniswap_v2/assets/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Uniswap v2 network assets <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Return a paginated list of Uniswap pools sorted by exchange volume.",
        "operationId": "getV11NetworksUniswap_v2Assets",
        "parameters": [
          {
            "name": "tickers",
            "in": "query",
            "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapExchangeListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/transaction_v2/{tx_hash}/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get a transaction <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Retrieve a single transaction for `tx_hash` including their decoded log events.\n\nHere's an example response with fully decoded event logs: https://gist.github.com/gane5h/887ab9f81a364b804112cf1dee3cf7fc",
        "operationId": "getV1WithChain_idTransaction_v2WithTx_hash",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "tx_hash",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "no-logs",
            "in": "query",
            "description": "Setting this to `true` will omit decoded event logs, resulting in lighter and faster responses. By default it's set to `false`.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/56/networks/pancakeswap_v2/assets/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Pancakeswap V2 network assets <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">batch</span>",
        "description": "Return a paginated list of Pancake V2 pools sorted by exchange volume. Only pools with swaps in the last 24 hours are included.  \n\nHere's an example response: https://gist.github.com/gane5h/1c5e11a2a2f5e8555220c0b525b3d5c9",
        "operationId": "getV156NetworksPancakeswap_v2Assets",
        "parameters": [
          {
            "name": "tickers",
            "in": "query",
            "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
            "schema": { "type": "string" }
          },
          {
            "name": "contract-addresses",
            "in": "query",
            "description": "If `contract-addresses` (a comma separated list) is present, only return the pools that contain these contracts.",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SushiswapExchangeListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/pricing/historical_by_addresses_v2/{chain_id}/{quote_currency}/{contract_addresses}/": {
      "get": {
        "tags": ["Pricing endpoints"],
        "summary": "Get historical prices by addresses v2<span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">batch</span>",
        "description": "Get historical prices for a `contract_address`, or a comma-separated group of `contract_addresses` in a particular `chain_id` and `quote_currency`. Can pass to and from to define a range, by default if they are omitted, it returns today's price.",
        "operationId": "getV1PricingHistorical_by_addresses_v2WithChain_idWithQuote_currencyWithContract_addresses",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "quote_currency",
            "in": "path",
            "description": "The requested fiat currency.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "contract_addresses",
            "in": "path",
            "description": "Smart contract address(es).",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start day of the historical price range. (YYYY-MM-DD)",
            "schema": { "type": "string" }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end day of the historical price range. (YYYY-MM-DD)",
            "schema": { "type": "string" }
          },
          {
            "name": "prices-at-asc",
            "in": "query",
            "description": "Sort the prices in chronological ascending order. By default, it's set to `false` and returns prices in chronological descending order.",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressWithHistoricalPricesResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get all chains <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get all chains.",
        "operationId": "getV1Chains",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllChainInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/address/{address}/balances_v2/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get token balances for address <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Return a list of all ERC20 and NFT token balances along with their current spot prices. Note: Token holder balances exclude passive rewards through static reflection.",
        "operationId": "getV1WithChain_idAddressWithAddressBalances_v2",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "nft",
            "in": "query",
            "description": "Set to `true` to return ERC721 and ERC1155 assets. Defaults to `false`.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "no-nft-fetch",
            "in": "query",
            "description": "Set to `true` to skip fetching NFT metadata, which can result in faster responses. Defaults to `false` and only applies when `nft=true`.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BalanceResponseType" }
              }
            }
          }
        }
      }
    },
    "/v1/56/address/{address}/stacks/pancakeswap_v2/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Pancakeswap V2 address exchange balances <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Pancakeswap V2 address exchange balances. \n\nHere is an example response: https://gist.github.com/gane5h/76b4787b7e31fb1d4eec3dfc21c5aaa7",
        "operationId": "getV156AddressWithAddressStacksPancakeswap_v2Balances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The requested wallet address.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BalanceResponseType" }
              }
            }
          }
        }
      }
    },
    "/v1/pricing/tickers/": {
      "get": {
        "tags": ["Pricing endpoints"],
        "summary": "Get spot prices <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">batch</span>",
        "description": "Get spot prices and metadata for all tickers or a select group of tickers. Without `tickers` query param, it returns a paginated list of all tickers sorted by market cap.",
        "operationId": "getV1PricingTickers",
        "parameters": [
          {
            "name": "tickers",
            "in": "query",
            "description": "If tickers (a comma separated list of tickers is present), only return the spot prices for these tokens.",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TickerPriceResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/56/address/{address}/stacks/pancakeswap/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Pancakeswap address exchange balances <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Pancakeswap address exchange balances. \n\nHere is an example response: https://gist.github.com/gane5h/76b4787b7e31fb1d4eec3dfc21c5aaa7",
        "operationId": "getV156AddressWithAddressStacksPancakeswapBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The requested wallet address.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BalanceResponseType" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/block_v2/{start_date}/{end_date}/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get block heights <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Retrieve all the `block height(s)` of a particular chain within a date range. If the `end_date` is set to `latest`, return every block height from the `start_date` to now. \nHere is an example response: https://gist.github.com/adamwhitakerwilson/203d3f2bd7f5e683e5aa6e81357d4b03",
        "operationId": "getV1WithChain_idBlock_v2WithStart_dateWithEnd_date",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "start_date",
            "in": "path",
            "description": "The start datetime of the block height(s). (yyyy-MM-ddTHH:mm:ssZ), eg: 2020-01-01 or 2020-01-01T03:36:50z",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "end_date",
            "in": "path",
            "description": "The ending datetime of the block height(s). (yyyy-MM-ddTHH:mm:ssZ), eg: 2020-01-02 or 2020-01-02T03:36:50z",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SingleBlockResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/compound/acts/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Compound address activity <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Compound address activity.",
        "operationId": "getV11AddressWithAddressStacksCompoundActs",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompoundActivityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/pricing/historical/{quote_currency}/{ticker_symbol}/": {
      "get": {
        "tags": ["Pricing endpoints"],
        "summary": "Get historical prices by ticker symbol <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">batch</span>",
        "description": "Get historical prices for a `ticker_symbol` in a particular `quote_currency`. Can pass to and from to define a range, by default if they are omitted, it returns today's price.",
        "operationId": "getV1PricingHistoricalWithQuote_currencyWithTicker_symbol",
        "parameters": [
          {
            "name": "quote_currency",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ticker_symbol",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start day of the historical price range. (YYYY-MM-DD)",
            "schema": { "type": "string" }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end day of the historical price range. (YYYY-MM-DD)",
            "schema": { "type": "string" }
          },
          {
            "name": "prices-at-asc",
            "in": "query",
            "description": "Sort the prices in chronological ascending order. By default, it's set to `false` and returns prices in chronological descending order.",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressWithHistoricalPricesResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/status/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get all chain statuses <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get all chain statuses.",
        "operationId": "getV1ChainsStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChainStatusResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/address/{address}/stacks/sushiswap/acts/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Sushiswap address exchange liquidity transactions <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Sushiswap address exchange liquidity transactions. Here is an example response using Polygon/Matic `chain_id=137`: https://gist.github.com/adamwhitakerwilson/a87bac320324ecb65ab0173691867744",
        "operationId": "getV1WithChain_idAddressWithAddressStacksSushiswapActs",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "swaps",
            "in": "query",
            "description": "Get additional insight on swap event data related to this address, default: `false`",
            "schema": { "type": "string" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ActivityResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/tokens/{address}/token_holders_changes/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get changes in token holders between two block heights <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get token balance changes for token holders between `starting-block` and `ending-block`  Return a paginated list of token holders and their current/historical balances. If `ending-block` is omitted, the latest block is used. Note: Token holder balances exclude passive rewards through static reflection.\n\nHere's an example response for the UNI token between blocks `11000000` and `11383362`: https://gist.github.com/gane5h/23e2efcdeefb661fa2907fbbe2c81d5c",
        "operationId": "getV1WithChain_idTokensWithAddressToken_holders_changes",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "starting-block",
            "in": "query",
            "description": "Starting block to define a block range.",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "ending-block",
            "in": "query",
            "description": "Ending block to define a block range.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokenHolderDiff" }
              }
            }
          }
        }
      }
    },
    "/v1/1/networks/aave/assets/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Aave network assets <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Aave network assets.",
        "operationId": "getV11NetworksAaveAssets",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AaveAssetsResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/networks/sushiswap/assets/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Sushiswap network assets <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">batch</span>",
        "description": "Return a paginated list of Sushiswap pools sorted by exchange volume. Here is an example response using Fantom `chain_id=250`: https://gist.github.com/adamwhitakerwilson/ed8b13354aab3229f71e3e4ca6ed4a34",
        "operationId": "getV1WithChain_idNetworksSushiswapAssets",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "tickers",
            "in": "query",
            "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SushiswapExchangeListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/pricing/volatility/": {
      "get": {
        "tags": ["Pricing endpoints"],
        "summary": "Get price volatility <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">batch</span>",
        "description": "Get price volatility and metadata for a select group of tickers. Without the `tickers` query param, it defaults to `ETH` volatility.",
        "operationId": "getV1PricingVolatility",
        "parameters": [
          {
            "name": "tickers",
            "in": "query",
            "description": "If tickers (a comma separated list of tickers is present), only return the spot prices for these tokens.",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceVolatilityResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/uniswap_v1/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Uniswap v1 address exchange balances <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Uniswap v1 address exchange balances. ",
        "operationId": "getV11AddressWithAddressStacksUniswap_v1Balances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BalanceResponseType" }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/tokens/{address}/token_holders/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get token holders as of a block height <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Return a paginated list of token holders. If `{block-height}` is omitted, the latest block is used. Note: Token holder balances exclude passive rewards through static reflection.\n\nHere's an example response of the token holders of the UNI token as of block height `11383235`: https://gist.github.com/gane5h/0c7c088c28def63e60cf7bd3957ce9a5",
        "operationId": "getV1WithChain_idTokensWithAddressToken_holders",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "block-height",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokenHolderResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/1/networks/augur/affiliate_fee/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Augur market affiliate fee divisors <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Augur market affiliate fee divisors.",
        "operationId": "getV11NetworksAugurAffiliate_fee",
        "parameters": [
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AugurAffiliateResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/tokens/tokenlists/{id}/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get all contract metadata <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Returns a list of all contracts on a blockchain along with their metadata.",
        "operationId": "getV1WithChain_idTokensTokenlistsWithId",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Supports `56` for BSC Mainnet and `137` for Polygon/Matic Mainnet, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Only `all` supported right now.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContractMetadata" }
              }
            }
          }
        }
      }
    },
    "/v1/56/address/{address}/stacks/pancakeswap/acts/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Pancakeswap address exchange liquidity transactions <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Pancakeswap address exchange liquidity transactions. \n\nHere is an example response: https://gist.github.com/gane5h/62ebc3bcc2edf6433c9bb92b938416a4",
        "operationId": "getV156AddressWithAddressStacksPancakeswapActs",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The requested wallet address.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "swaps",
            "in": "query",
            "description": "Get additional insight on swap event data related to this address, default: `false`",
            "schema": { "type": "string" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ActivityResponse" }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/farming/positions/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get farming stats <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get farming positions on Uniswap, Sushiswap, and Harvest.",
        "operationId": "getV11AddressWithAddressStacksFarmingPositions",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FarmingStatsResponseItem"
                }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/curve/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Curve address balances <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Curve address balances.",
        "operationId": "getV11AddressWithAddressStacksCurveBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurveBalanceResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{chain_id}/tokens/{contract_address}/nft_transactions/{token_id}/": {
      "get": {
        "tags": ["Class A"],
        "summary": "Get NFT Transactions <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Returns a list of transactions given a NFT contract and a token ID on a blockchain network.",
        "operationId": "getV1WithChain_idTokensWithContract_addressNft_transactionsWithToken_id",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "contract_address",
            "in": "path",
            "description": "Smart contract address.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "token_id",
            "in": "path",
            "description": "The ID to the token",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "The specific page to be returned.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "The number of results per page.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "quote-currency",
            "in": "query",
            "description": "The requested fiat currency.",
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
            "schema": { "type": "string" }
          },
          {
            "name": "primer",
            "in": "query",
            "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
            "schema": { "type": "string" }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filters the records to pass only the documents that match the specified condition(s).",
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
            "schema": { "type": "string" }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts all input records and returns them in ascending or descending sorted order.",
            "schema": { "type": "string" }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skips over the specified number of records.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of records.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftTransactionsResponseType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/1/address/{address}/stacks/aave/balances/": {
      "get": {
        "tags": ["Class B"],
        "summary": "Get Aave address balances <span id=\"refresh-rate\" class=\"label label-primary label-xsmall\" style=\"vertical-align:super; font-size:x-small; background-color:#0098db;\">real-time</span>",
        "description": "Get Aave address balances.",
        "operationId": "getV11AddressWithAddressStacksAaveBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Passing in an `ENS` resolves automatically.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveBalanceResponseType"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BinaryArrayList": {
        "type": "array",
        "properties": { "empty": { "type": "boolean" } },
        "items": {
          "type": "array",
          "items": { "type": "string", "format": "byte" }
        }
      },
      "BlockTransactionWithLogEvents": {
        "type": "object",
        "properties": {
          "block_signed_at": {
            "type": "string",
            "description": "The signed time of the block.",
            "format": "date-time"
          },
          "block_height": {
            "type": "integer",
            "description": "The height of the block.",
            "format": "int32"
          },
          "tx_hash": {
            "type": "string",
            "description": "The transaction hash."
          },
          "tx_offset": {
            "type": "integer",
            "description": "The transaction offset.",
            "format": "int32"
          },
          "successful": {
            "type": "boolean",
            "description": "The transaction status."
          },
          "from_address": {
            "type": "string",
            "description": "The address where the transaction is from."
          },
          "from_address_label": {
            "type": "string",
            "description": "The label of `from` address."
          },
          "to_address": {
            "type": "string",
            "description": "The address where the transaction is to."
          },
          "to_address_label": {
            "type": "string",
            "description": "The label of `to` address."
          },
          "value": {
            "type": "number",
            "description": "The value attached to this tx."
          },
          "value_quote": {
            "type": "number",
            "description": "The value attached in `quote-currency` to this tx.",
            "format": "double"
          },
          "gas_offered": {
            "type": "integer",
            "description": "The gas offered for this tx.",
            "format": "int64"
          },
          "gas_spent": {
            "type": "integer",
            "description": "The gas spent for this tx.",
            "format": "int64"
          },
          "gas_price": {
            "type": "integer",
            "description": "The gas price at the time of this tx.",
            "format": "int64"
          },
          "gas_quote": {
            "type": "number",
            "description": "The gas spent in `quote-currency` denomination.",
            "format": "double"
          },
          "gas_quote_rate": {
            "type": "number",
            "description": "Historical ETH price at the time of tx.",
            "format": "double"
          },
          "log_events": {
            "type": "array",
            "description": "The log events.",
            "items": { "$ref": "#/components/schemas/LogEventItem" }
          }
        }
      },
      "DecodedItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the decoded item."
          },
          "signature": {
            "type": "string",
            "description": "The signature of the decoded item."
          },
          "params": {
            "type": "array",
            "description": "The parameters of the decoded item.",
            "items": { "$ref": "#/components/schemas/DecodedParamItem" }
          }
        },
        "description": "The decoded item."
      },
      "DecodedParamItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the parameter."
          },
          "type": {
            "type": "string",
            "description": "The type of the parameter."
          },
          "indexed": {
            "type": "boolean",
            "description": "The index of the parameter."
          },
          "decoded": {
            "type": "boolean",
            "description": "The decoded value of the parameter."
          },
          "value": {
            "type": "object",
            "description": "The value of the parameter."
          }
        },
        "description": "The parameters of the decoded item."
      },
      "LogEventItem": {
        "type": "object",
        "properties": {
          "block_signed_at": {
            "type": "string",
            "description": "The signed time of the block.",
            "format": "date-time"
          },
          "block_height": {
            "type": "integer",
            "description": "The height of the block.",
            "format": "int64"
          },
          "tx_offset": {
            "type": "integer",
            "description": "The transaction offset.",
            "format": "int64"
          },
          "log_offset": {
            "type": "integer",
            "description": "The log offset.",
            "format": "int64"
          },
          "tx_hash": {
            "type": "string",
            "description": "The transaction hash."
          },
          "_raw_log_topics_bytes": {
            "type": "array",
            "properties": { "empty": { "type": "boolean" } },
            "items": {
              "type": "array",
              "items": { "type": "string", "format": "byte" }
            }
          },
          "raw_log_topics": { "type": "array", "items": { "type": "string" } },
          "sender_contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "sender_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "sender_contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "sender_address": {
            "type": "string",
            "description": "The address of the sender."
          },
          "sender_address_label": {
            "type": "string",
            "description": "The label of the sender address."
          },
          "sender_logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "raw_log_data": {
            "type": "string",
            "description": "The log events in raw."
          },
          "decoded": { "$ref": "#/components/schemas/DecodedItem" }
        },
        "description": "The log events."
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "has_more": {
            "type": "boolean",
            "description": "`true` if we can  paginate to get more data."
          },
          "page_number": {
            "type": "integer",
            "description": "The specific page being returned.",
            "format": "int32"
          },
          "page_size": {
            "type": "integer",
            "description": "The number of results per page.",
            "format": "int32"
          },
          "total_count": {
            "type": "integer",
            "description": "Total number of entries.",
            "format": "int32"
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The transactions.",
            "items": {
              "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
            }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "BalanceResponseType": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "updated_at": { "type": "string", "format": "date-time" },
          "next_update_at": { "type": "string", "format": "date-time" },
          "quote_currency": { "type": "string" },
          "uniswap_v2": { "$ref": "#/components/schemas/UniswapBalanceWrapper" }
        }
      },
      "ExternalNftMetadata": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "The Name of the NFT." },
          "description": {
            "type": "string",
            "description": "The Description or Bio of the NFT."
          },
          "image": {
            "type": "string",
            "description": "The Image URL of the NFT."
          },
          "image_256": {
            "type": "string",
            "description": "The Image URL of the NFT resized to 256x256."
          },
          "image_512": {
            "type": "string",
            "description": "The Image URL of the NFT resized to 512x512."
          },
          "image_1024": {
            "type": "string",
            "description": "The Image URL of the NFT resized to 1024x1024."
          },
          "animation_url": {
            "type": "string",
            "description": "The Animation URL of the NFT."
          },
          "external_url": {
            "type": "string",
            "description": "The External URL of the NFT."
          },
          "attributes": {
            "type": "object",
            "description": "Array of additional attributes of the NFT."
          },
          "owner": { "type": "string", "description": "The owner of the NFT." }
        },
        "description": "Externally fetched metadata."
      },
      "NftMetadataWithOwner": {
        "type": "object",
        "properties": {
          "token_id": {
            "type": "integer",
            "description": "The ID of the NFT."
          },
          "token_balance": {
            "type": "integer",
            "description": "The count of the number of NFTs with this ID."
          },
          "token_url": {
            "type": "string",
            "description": "External URL for additional metadata."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "token_price_wei": {
            "type": "integer",
            "description": "The latest price value on chain of the token ID."
          },
          "token_quote_rate_eth": {
            "type": "string",
            "description": "The latest quote_rate of the token ID denominated in unscaled ETH."
          },
          "original_owner": {
            "type": "string",
            "description": "The address of the original owner of this NFT."
          },
          "external_data": {
            "$ref": "#/components/schemas/ExternalNftMetadata"
          },
          "owner": {
            "type": "string",
            "description": "The current owner of this NFT."
          },
          "owner_address": {
            "type": "string",
            "description": "The address of the current owner of this NFT."
          },
          "burned": {
            "type": "boolean",
            "description": "When set to true, this NFT has been Burned."
          }
        },
        "description": "Array of NFTs that are held under this contract."
      },
      "WalletBalanceItem": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "type": {
            "type": "string",
            "description": "One of `cryptocurrency`, `stablecoin`, `nft` or `dust`."
          },
          "balance": {
            "type": "integer",
            "description": "The asset balance. Use `contract_decimals` to scale this balance for display purposes."
          },
          "balance_24h": {
            "type": "integer",
            "description": "The asset balance 24 hours ago."
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          },
          "quote_rate_24h": {
            "type": "number",
            "description": "The spot exchange rate in `quote-currency` as of 24 hours ago.",
            "format": "float"
          },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "quote_24h": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency` as of 24 hours ago.",
            "format": "float"
          },
          "nft_data": {
            "type": "array",
            "description": "Array of NFTs that are held under this contract.",
            "items": { "$ref": "#/components/schemas/NftMetadataWithOwner" }
          }
        }
      },
      "HistoricalPortfolioResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "List of tokens in portfolio",
            "items": { "$ref": "#/components/schemas/OHLCTimestampedItem" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "OHLC": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "integer",
            "description": "The asset balance. Use `contract_decimals` to scale this balance for display purposes."
          },
          "quote": {
            "type": "number",
            "description": "The historical balance converted to fiat in `quote-currency`.",
            "format": "float"
          }
        },
        "description": "The closing price for the day."
      },
      "OHLCTimestampedItem": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Portfolio value at given timestamp",
            "format": "date-time"
          },
          "quote_rate": {
            "type": "number",
            "description": "The historical spot exchange rate in `quote-currency`.",
            "format": "float"
          },
          "open": { "$ref": "#/components/schemas/OHLC" },
          "high": { "$ref": "#/components/schemas/OHLC" },
          "low": { "$ref": "#/components/schemas/OHLC" },
          "close": { "$ref": "#/components/schemas/OHLC" }
        },
        "description": "List of tokens in portfolio"
      },
      "BlockTransactionWithContractTransfers": {
        "type": "object",
        "properties": {
          "block_signed_at": {
            "type": "string",
            "description": "The signed time of the block.",
            "format": "date-time"
          },
          "block_height": {
            "type": "integer",
            "description": "The height of the block.",
            "format": "int32"
          },
          "tx_hash": {
            "type": "string",
            "description": "The transaction hash."
          },
          "tx_offset": {
            "type": "integer",
            "description": "The transaction offset.",
            "format": "int32"
          },
          "successful": {
            "type": "boolean",
            "description": "The transaction status."
          },
          "from_address": {
            "type": "string",
            "description": "The address where the transaction is from."
          },
          "from_address_label": {
            "type": "string",
            "description": "The label of `from` address."
          },
          "to_address": {
            "type": "string",
            "description": "The address where the transaction is to."
          },
          "to_address_label": {
            "type": "string",
            "description": "The label of `to` address."
          },
          "value": {
            "type": "number",
            "description": "The value attached to this tx."
          },
          "value_quote": {
            "type": "number",
            "description": "The value attached in `quote-currency` to this tx.",
            "format": "double"
          },
          "gas_offered": {
            "type": "integer",
            "description": "The gas offered for this tx.",
            "format": "int64"
          },
          "gas_spent": {
            "type": "integer",
            "description": "The gas spent for this tx.",
            "format": "int64"
          },
          "gas_price": {
            "type": "integer",
            "description": "The gas price at the time of this tx.",
            "format": "int64"
          },
          "gas_quote": {
            "type": "number",
            "description": "The gas spent in `quote-currency` denomination.",
            "format": "double"
          },
          "gas_quote_rate": {
            "type": "number",
            "description": "Historical ETH price at the time of tx.",
            "format": "double"
          },
          "transfers": {
            "type": "array",
            "description": "Transfer items.",
            "items": { "$ref": "#/components/schemas/TokenTransferItem" }
          }
        },
        "description": "The transactions."
      },
      "TokenTransferItem": {
        "type": "object",
        "properties": {
          "block_signed_at": {
            "type": "string",
            "description": "The signed time of the block.",
            "format": "date-time"
          },
          "tx_hash": {
            "type": "string",
            "description": "The transaction hash."
          },
          "from_address": {
            "type": "string",
            "description": "The address where the transfer is from."
          },
          "from_address_label": {
            "type": "string",
            "description": "The label of `from` address."
          },
          "to_address": {
            "type": "string",
            "description": "The address where the transfer is to."
          },
          "to_address_label": {
            "type": "string",
            "description": "The label of `to` address."
          },
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "transfer_type": { "type": "string", "description": "IN/OUT." },
          "delta": {
            "type": "number",
            "description": "The delta attached to this transfer."
          },
          "balance": {
            "type": "number",
            "description": "The transfer balance. Use `contract_decimals` to scale this balance for display purposes."
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "double"
          },
          "delta_quote": {
            "type": "number",
            "description": "The current delta converted to fiat in `quote-currency`.",
            "format": "double"
          },
          "balance_quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "double"
          }
        },
        "description": "Transfer items."
      },
      "TransferResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The transactions.",
            "items": {
              "$ref": "#/components/schemas/BlockTransactionWithContractTransfers"
            }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "ContainerU": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UniswapV2BalanceItem" }
          }
        }
      },
      "UniswapToken": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "balance": { "type": "integer", "description": "Current balance." },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          }
        }
      },
      "UniswapTokenWithSupply": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "balance": { "type": "integer", "description": "Current balance." },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          },
          "total_supply": {
            "type": "integer",
            "description": "Total supply of this pool token."
          }
        }
      },
      "UniswapV2BalanceItem": {
        "type": "object",
        "properties": {
          "token_0": { "$ref": "#/components/schemas/UniswapToken" },
          "token_1": { "$ref": "#/components/schemas/UniswapToken" },
          "pool_token": {
            "$ref": "#/components/schemas/UniswapTokenWithSupply"
          }
        }
      },
      "ActivityResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The transactions.",
            "items": { "$ref": "#/components/schemas/UniswapV2ActivityItem" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "SushiswapActivityItem": {
        "required": ["act", "act_at", "description", "tx_hash"],
        "type": "object",
        "properties": {
          "act_at": { "type": "string", "format": "date-time" },
          "act": {
            "type": "string",
            "enum": ["ADD_LIQUIDITY", "REMOVE_LIQUIDITY", "SWAP"]
          },
          "description": { "type": "string" },
          "tx_hash": { "type": "string" },
          "token_0": { "$ref": "#/components/schemas/SushiswapToken" },
          "token_1": { "$ref": "#/components/schemas/SushiswapToken" },
          "pool_token": {
            "$ref": "#/components/schemas/SushiswapTokenWithSupply"
          }
        },
        "description": "The transactions."
      },
      "SushiswapToken": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "balance": { "type": "integer", "description": "Current balance." },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          }
        }
      },
      "SushiswapTokenWithSupply": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "balance": { "type": "integer", "description": "Current balance." },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          },
          "total_supply": {
            "type": "integer",
            "description": "Total supply of this pool token."
          }
        }
      },
      "AaveBalanceItemV2": {
        "type": "object",
        "properties": {
          "atoken_contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "atoken_contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "atoken_contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "atoken_contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "atoken_balance": {
            "type": "integer",
            "description": "Current balance."
          },
          "asset_contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "asset_contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "asset_contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "liquidity_rate": {
            "type": "number",
            "description": "The current supply rate.",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "borrow_balance": {
            "type": "integer",
            "description": "The current borrow balance."
          },
          "borrow_rate": {
            "type": "number",
            "description": "The current borrow rate.",
            "format": "float"
          },
          "borrow_quote": {
            "type": "number",
            "description": "The current borrow balance in `quote_currency`.",
            "format": "float"
          },
          "origination_fee": {
            "type": "integer",
            "description": "The percentage of the loan amount collected on loan origination."
          }
        },
        "description": "`Aave v2` balance."
      },
      "AaveV2BalanceItemWithPositions": {
        "type": "object",
        "properties": {
          "balance": { "$ref": "#/components/schemas/AaveBalanceItemV2" },
          "supply_position": {
            "$ref": "#/components/schemas/AaveV2SupplyPosition"
          },
          "borrow_position": {
            "$ref": "#/components/schemas/AaveV2BorrowPosition"
          }
        },
        "description": "The transactions."
      },
      "AaveV2BalanceResponseItem": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The transactions.",
            "items": {
              "$ref": "#/components/schemas/AaveV2BalanceItemWithPositions"
            }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "AaveV2BorrowPosition": {
        "type": "object",
        "properties": {
          "borrowed": { "type": "string", "description": "Borrow statement." },
          "balance": { "type": "integer", "description": "Current balance." },
          "balance_quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "apr": {
            "type": "number",
            "description": "Borrow annual percentage rate.",
            "format": "float"
          }
        },
        "description": "`Aave v2` borrow position."
      },
      "AaveV2SupplyPosition": {
        "type": "object",
        "properties": {
          "supplied": { "type": "string", "description": "Supply statement." },
          "balance": { "type": "integer", "description": "Current balance." },
          "balance_quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "apy": {
            "type": "number",
            "description": "Supply annual percentage yield.",
            "format": "float"
          }
        },
        "description": "`Aave v2` supply position."
      },
      "FarmToken": {
        "type": "object",
        "properties": {
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "balance": { "type": "integer", "description": "Current balance." },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          }
        },
        "description": "Underlying asset."
      },
      "FarmTokenWithClaimable": {
        "type": "object",
        "properties": {
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "balance": { "type": "integer", "description": "Current balance." },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          },
          "claimable_farm": {
            "type": "integer",
            "description": "Current amount of claimable `FARM`."
          },
          "total_supply": {
            "type": "integer",
            "description": "Total supply of this pool token."
          },
          "claim_rate": {
            "type": "number",
            "description": "The current exchange rate for `FARM` in `quote-currency`.",
            "format": "float"
          },
          "reward_quote": {
            "type": "number",
            "description": "The current balance of `claimable FARM` converted to fiat in `quote-currency`.",
            "format": "float"
          }
        },
        "description": "Liquidity provider pool token."
      },
      "FarmingStatsItem": {
        "type": "object",
        "properties": {
          "harvest_stats": {
            "$ref": "#/components/schemas/HarvestPoolCollection"
          },
          "uniswap_stats": {
            "$ref": "#/components/schemas/UniswapPoolCollection"
          },
          "sushiswap_stats": {
            "$ref": "#/components/schemas/SushiswapPoolCollection"
          }
        },
        "description": "The transactions."
      },
      "FarmingStatsResponseItem": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The transactions.",
            "items": { "$ref": "#/components/schemas/FarmingStatsItem" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "HarvestFarmingStake": {
        "type": "object",
        "properties": {
          "lp_token": { "$ref": "#/components/schemas/FarmToken" },
          "lp_underlying": { "$ref": "#/components/schemas/FarmToken" },
          "pool_token": {
            "$ref": "#/components/schemas/FarmTokenWithClaimable"
          }
        }
      },
      "HarvestPoolCollection": {
        "type": "object",
        "properties": {
          "farm_token": { "$ref": "#/components/schemas/FarmToken" },
          "stakes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/HarvestFarmingStake" }
          }
        },
        "description": "`Harvest Farm` yield farming position collection."
      },
      "SushiToken": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "balance": { "type": "integer", "description": "Current balance." },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          }
        }
      },
      "SushiTokenWithSupply": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "balance": { "type": "integer", "description": "Current balance." },
          "quote": {
            "type": "number",
            "description": "The current balance converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          },
          "total_supply": {
            "type": "integer",
            "description": "Total supply of this pool token."
          }
        }
      },
      "SushiswapFarmingStake": {
        "type": "object",
        "properties": {
          "pool_share": {
            "type": "number",
            "description": "Total share of this pool.",
            "format": "float"
          },
          "total_value": {
            "type": "number",
            "description": "Current total value of liquidity provided, converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "claimable_sushi": {
            "type": "integer",
            "description": "Current amount of claimable `SUSHI`."
          },
          "claimable_sushi_quote": {
            "type": "number",
            "description": "The current balance of `claimable SUSHI` converted to fiat in `quote-currency`.",
            "format": "float"
          },
          "balance": { "type": "string", "description": "Current balance." },
          "token_0": { "$ref": "#/components/schemas/SushiToken" },
          "token_1": { "$ref": "#/components/schemas/SushiToken" },
          "pool_token": { "$ref": "#/components/schemas/SushiTokenWithSupply" }
        }
      },
      "SushiswapPoolCollection": {
        "type": "object",
        "properties": {
          "sushi_token": { "$ref": "#/components/schemas/SushiToken" },
          "stakes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SushiswapFarmingStake" }
          }
        },
        "description": "`Sushiswap` yield farming position collection"
      },
      "UniswapFarmingStake": {
        "type": "object",
        "properties": {
          "token_0": { "$ref": "#/components/schemas/UniswapToken" },
          "token_1": { "$ref": "#/components/schemas/UniswapToken" },
          "pool_token": {
            "$ref": "#/components/schemas/UniswapTokenWithSupply"
          }
        }
      },
      "UniswapPoolCollection": {
        "type": "object",
        "properties": {
          "uniswap_token": { "$ref": "#/components/schemas/UniswapToken" },
          "stakes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UniswapFarmingStake" }
          }
        },
        "description": "`Uniswap V2` liquidity pool position collection"
      },
      "CompoundBalanceItem": {
        "type": "object",
        "properties": {
          "account_address": { "type": "string" },
          "source": { "type": "string" },
          "supply_tokens": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CompoundToken" }
          },
          "borrow_tokens": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CompoundToken" }
          },
          "total_supply_eth": { "type": "integer" },
          "total_borrow_eth": { "type": "integer" },
          "total_collateral_eth": { "type": "integer" },
          "total_borrowing_power_eth": { "type": "integer" },
          "total_supply_eth_quote": { "type": "number", "format": "float" },
          "total_borrow_eth_quote": { "type": "number", "format": "float" },
          "total_collateral_eth_quote": { "type": "number", "format": "float" },
          "total_borrowing_power_eth_quote": {
            "type": "number",
            "format": "float"
          },
          "comp_accrued_quote": { "type": "number", "format": "float" },
          "comp_balance_quote": { "type": "number", "format": "float" },
          "comp_balance": { "type": "integer" },
          "comp_accrued": { "type": "integer" }
        }
      },
      "CompoundBalanceResponseType": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "updated_at": { "type": "string", "format": "date-time" },
          "next_update_at": { "type": "string", "format": "date-time" },
          "quote_currency": { "type": "string" },
          "compound": { "$ref": "#/components/schemas/ContainerCo" }
        }
      },
      "CompoundToken": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": { "type": "string" },
          "balance": { "type": "integer" },
          "interest_accrued": { "type": "integer" },
          "balance_quote": { "type": "number", "format": "float" },
          "interest_accrued_quote": { "type": "number", "format": "float" },
          "quote_rate": { "type": "number", "format": "float" },
          "apr": { "type": "number", "format": "float" }
        }
      },
      "ContainerCo": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CompoundBalanceItem" }
          }
        }
      },
      "CompoundActivity": {
        "type": "object",
        "properties": {
          "act_at": { "type": "string", "format": "date-time" },
          "tx_hash": { "type": "string" },
          "act": { "type": "string" },
          "description": { "type": "string" },
          "amount": { "type": "number" },
          "ctoken_amount": { "type": "number" },
          "contract_address": { "type": "string" },
          "contract_logo_url": { "type": "string" },
          "contract_decimals": { "type": "integer", "format": "int32" },
          "ctoken_contract_decimals": { "type": "integer", "format": "int32" },
          "contract_ticker_symbol": { "type": "string" },
          "ctoken_contract_ticker_symbol": { "type": "string" },
          "quote_rate": { "type": "number", "format": "float" },
          "quote": { "type": "number", "format": "float" },
          "successful": { "type": "boolean" },
          "gas_offered": { "type": "integer", "format": "int64" },
          "gas_spent": { "type": "integer", "format": "int64" },
          "gas_price": { "type": "integer", "format": "int64" },
          "gas_quote": { "type": "number", "format": "float" }
        },
        "description": "The transactions."
      },
      "CompoundActivityResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The transactions.",
            "items": { "$ref": "#/components/schemas/CompoundActivity" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "TokenHolder": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "address": {
            "type": "string",
            "description": "The address of token holder."
          },
          "balance": {
            "type": "number",
            "description": "The balance of token holder."
          },
          "total_supply": {
            "type": "integer",
            "description": "The total supply of the holder."
          },
          "block_height": {
            "type": "integer",
            "description": "The height of the block.",
            "format": "int64"
          }
        }
      },
      "TokenHolderResponse": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TokenHolder" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "TokenHolderDiff": {
        "type": "object",
        "properties": {
          "token_holder": {
            "type": "string",
            "description": "The token holder."
          },
          "prev_balance": {
            "type": "number",
            "description": "The starting block balance."
          },
          "prev_block_height": {
            "type": "integer",
            "description": "The starting block height.",
            "format": "int64"
          },
          "next_balance": {
            "type": "number",
            "description": "The ending block balance."
          },
          "next_block_height": {
            "type": "integer",
            "description": "The ending block height.",
            "format": "int64"
          },
          "diff": {
            "type": "number",
            "description": "The difference of the balance."
          }
        }
      },
      "NFTMetaDataRsponseType": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WalletBalanceItem" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "NftTransactionsResponse": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "type": {
            "type": "string",
            "description": "One of `cryptocurrency`, `stablecoin`, `nft` or `dust`."
          },
          "nft_transactions": {
            "type": "array",
            "description": "The nft transactions.",
            "items": {
              "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
            }
          }
        }
      },
      "NftTransactionsResponseType": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/NftTransactionsResponse" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "ContractMetadata": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": { "type": "string", "description": "Smart contract URL." }
        }
      },
      "TokenIdResponse": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "token_id": {
            "type": "integer",
            "description": "The list of token ids under the contract address."
          }
        }
      },
      "TokenIdResponseType": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TokenIdResponse" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "ExchangeVolumeV2": {
        "type": "object",
        "properties": {
          "exchange": { "type": "string" },
          "swap_count_24h": { "type": "integer", "format": "int64" },
          "total_liquidity_quote": { "type": "number", "format": "float" },
          "volume_24h_quote": { "type": "number", "format": "float" },
          "fee_24h_quote": { "type": "number", "format": "float" },
          "total_supply": { "type": "integer" },
          "quote_rate": { "type": "number", "format": "float" },
          "block_height": { "type": "integer", "format": "int32" },
          "token_0": { "$ref": "#/components/schemas/TokenV2" },
          "token_1": { "$ref": "#/components/schemas/TokenV2" },
          "chain_name": { "type": "string" },
          "chain_id": { "type": "string" },
          "dex_name": { "type": "string" },
          "volume_7d_quote": { "type": "number", "format": "float" },
          "annualized_fee": { "type": "number", "format": "float" }
        }
      },
      "SushiswapExchangeListResponse": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ExchangeVolume" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "TokenV2": {
        "type": "object",
        "properties": {
          "contract_address": { "type": "string" },
          "contract_name": { "type": "string" },
          "volume_in_24h": { "type": "number" },
          "volume_out_24h": { "type": "number" },
          "quote_rate": { "type": "number", "format": "float" },
          "reserve": { "type": "integer" },
          "logo_url": { "type": "string" },
          "contract_ticker_symbol": { "type": "string" },
          "contract_decimals": { "type": "integer", "format": "int32" },
          "volume_in_7d": { "type": "number" },
          "volume_out_7d": { "type": "number" }
        }
      },
      "ExchangeVolume": {
        "type": "object",
        "properties": {
          "exchange": { "type": "string" },
          "swap_count_24h": { "type": "integer", "format": "int64" },
          "total_liquidity_quote": { "type": "number", "format": "float" },
          "volume_24h_quote": { "type": "number", "format": "float" },
          "fee_24h_quote": { "type": "number", "format": "float" },
          "total_supply": { "type": "integer" },
          "quote_rate": { "type": "number", "format": "float" },
          "block_height": { "type": "integer", "format": "int32" },
          "token_0": { "$ref": "#/components/schemas/Token" },
          "token_1": { "$ref": "#/components/schemas/Token" }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "contract_address": { "type": "string" },
          "contract_name": { "type": "string" },
          "volume_in_24h": { "type": "number" },
          "volume_out_24h": { "type": "number" },
          "quote_rate": { "type": "number", "format": "float" },
          "reserve": { "type": "integer" },
          "logo_url": { "type": "string" },
          "contract_ticker_symbol": { "type": "string" },
          "contract_decimals": { "type": "integer", "format": "int32" }
        }
      },
      "AaveV2AssetInfo": {
        "type": "object",
        "properties": {
          "underlying": {
            "$ref": "#/components/schemas/ContractMetadataWithPrices"
          },
          "atoken": { "$ref": "#/components/schemas/ContractMetadata" },
          "variable_borrow_apr": {
            "type": "number",
            "description": "Variable-borrow annual percentage rate.",
            "format": "float"
          },
          "stable_borrow_apr": {
            "type": "number",
            "description": "Stable-borrow annual percentage rate.",
            "format": "float"
          },
          "supply_apy": {
            "type": "number",
            "description": "Supply annual percentage yield.",
            "format": "float"
          },
          "lending_pool_contract": {
            "type": "string",
            "description": "The main contract of the Aave v2 protocol."
          },
          "lending_pool_addresses_provider": {
            "type": "string",
            "description": "Addresses register of the protocol for a particular market."
          },
          "lending_pool_addresses_provider_registry": {
            "type": "string",
            "description": "A register of the active `lending_pool_addresses_provider` contracts, covering all markets."
          },
          "lending_pool_collateral_manager": {
            "type": "string",
            "description": "Implements actions involving management of collateral in the protocol."
          },
          "lending_pool_configurator": {
            "type": "string",
            "description": "Provides configuration functions for the LendingPool contracts."
          },
          "lending_rate_oracle": {
            "type": "string",
            "description": "Holds the information needed to calculate and update the interest rates of specific reserves."
          },
          "price_oracle": {
            "type": "string",
            "description": "The protocol price provider."
          },
          "pool_admin": {
            "type": "string",
            "description": "The pool administrator contract."
          },
          "emergency_admin": {
            "type": "string",
            "description": "The pool emergency administrator contract."
          },
          "protocol_data_provider": {
            "type": "string",
            "description": "To help integrators and developers more easily leverage the Aave v2 Protocol data and features."
          },
          "weth_gateway": {
            "type": "string",
            "description": "A helper contract to easily wrap and unwrap ETH as necessary."
          },
          "collector_contract": {
            "type": "string",
            "description": "The reserve factor allocates a share of the protocol's interests to this collector contract."
          }
        },
        "description": "The transactions."
      },
      "AaveV2AssetsResponseItem": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The transactions.",
            "items": { "$ref": "#/components/schemas/AaveV2AssetInfo" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "ContractMetadataWithPrices": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          }
        }
      },
      "UniswapExchangeListResponse": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ExchangeVolume" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "CompoundAssetInfo": {
        "type": "object",
        "properties": {
          "ctoken": {
            "$ref": "#/components/schemas/ContractMetadataWithPrices"
          },
          "underlying": {
            "$ref": "#/components/schemas/ContractMetadataWithPrices"
          },
          "borrow_apr": { "type": "number", "format": "float" },
          "supply_apr": { "type": "number", "format": "float" }
        }
      },
      "CompoundAssetResponse": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CompoundAssetInfo" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "AaveAssetInfo": {
        "type": "object",
        "properties": {
          "underlying": {
            "$ref": "#/components/schemas/ContractMetadataWithPrices"
          },
          "atoken": { "$ref": "#/components/schemas/ContractMetadata" },
          "variable_borrow_apr": {
            "type": "number",
            "description": "Variable-borrow annual percentage rate.",
            "format": "float"
          },
          "stable_borrow_apr": {
            "type": "number",
            "description": "Stable-borrow annual percentage rate.",
            "format": "float"
          },
          "supply_apy": {
            "type": "number",
            "description": "Supply annual percentage yield.",
            "format": "float"
          },
          "lending_pool_contract": {
            "type": "string",
            "description": "The main contract of the Aave v1 protocol."
          },
          "lending_pool_core_contract": {
            "type": "string",
            "description": "The main core contract of the Aave v1 protocol."
          }
        }
      },
      "AaveAssetsResponse": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AaveAssetInfo" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "AugurAffiliateResponseType": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MarketItemAffiliate" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "MarketItemAffiliate": {
        "type": "object",
        "properties": {
          "market_address": { "type": "string" },
          "affiliate_fee": { "type": "integer" }
        }
      },
      "EventsListResponseType": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LogEventItem" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "SingleTransactionResponse": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
            }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "Block": {
        "type": "object",
        "properties": {
          "signed_at": {
            "type": "string",
            "description": "The signed time of the block.",
            "format": "date-time"
          },
          "height": {
            "type": "integer",
            "description": "The height of the block.",
            "format": "int32"
          }
        }
      },
      "SingleBlockResponse": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Block" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "AllChainInfoResponse": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GenericChainInfoDisplay" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "GenericChainInfoDisplay": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Name of chain" },
          "chain_id": {
            "type": "string",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet."
          },
          "is_testnet": { "type": "boolean" },
          "db_schema_name": { "type": "string" },
          "label": { "type": "string" },
          "logo_url": { "type": "string" }
        }
      },
      "ChainStatusResponse": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericChainInfoStatusDisplay"
            }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "GenericChainInfoStatusDisplay": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Name of chain" },
          "chain_id": {
            "type": "string",
            "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet."
          },
          "is_testnet": { "type": "boolean" },
          "logo_url": { "type": "string" },
          "synced_block_height": {
            "type": "integer",
            "description": "The height of the block.",
            "format": "int32"
          },
          "synced_blocked_signed_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TickerPriceItemWithRank": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          },
          "rank": {
            "type": "integer",
            "description": "Market cap rank.",
            "format": "int32"
          }
        }
      },
      "TickerPriceResponseType": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TickerPriceItemWithRank" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "PriceVolatilityResponseType": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/VolatilityItem" }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "VolatilityItem": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "stddev_1h": {
            "type": "number",
            "description": "1h price standard deviation",
            "format": "float"
          },
          "stddev_2h": {
            "type": "number",
            "description": "2h price standard deviation",
            "format": "float"
          },
          "stddev_4h": {
            "type": "number",
            "description": "4h price standard deviation",
            "format": "float"
          },
          "stddev_8h": {
            "type": "number",
            "description": "8h price standard deviation",
            "format": "float"
          },
          "stddev_16h": {
            "type": "number",
            "description": "16h price standard deviation",
            "format": "float"
          },
          "stddev_24h": {
            "type": "number",
            "description": "24h price standard deviation",
            "format": "float"
          },
          "quote_rate": {
            "type": "number",
            "description": "The current spot exchange rate in `quote-currency`.",
            "format": "float"
          }
        }
      },
      "AddressWithHistoricalPricesItem": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "update_at": { "type": "string", "format": "date-time" },
          "quote_currency": { "type": "string" },
          "prices": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/HistoricalPriceItem" }
          }
        }
      },
      "AddressWithHistoricalPricesResponseType": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressWithHistoricalPricesItem"
            }
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "HistoricalPriceItem": {
        "type": "object",
        "properties": {
          "contract_metadata": {
            "$ref": "#/components/schemas/ContractMetadata"
          },
          "date": { "type": "string", "format": "date" },
          "price": { "type": "number", "format": "float" }
        }
      },
      "BalancerBalanceItem": {
        "type": "object",
        "properties": {
          "pool": {
            "$ref": "#/components/schemas/BalancerTokenWithSupplyAndFee"
          },
          "assets": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BalancerTokenWithWeight" }
          }
        }
      },
      "BalancerBalanceResponseType": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "updated_at": { "type": "string", "format": "date-time" },
          "next_update_at": { "type": "string", "format": "date-time" },
          "quote_currency": { "type": "string" },
          "balancer": { "$ref": "#/components/schemas/ContainerB" }
        }
      },
      "BalancerTokenWithSupplyAndFee": {
        "type": "object",
        "properties": {
          "balance": { "type": "integer" },
          "contract_address": { "type": "string" },
          "logo_url": { "type": "string" },
          "contract_ticker_symbol": { "type": "string" },
          "contract_decimals": { "type": "integer", "format": "int32" },
          "quote": { "type": "number", "format": "float" },
          "quote_rate": { "type": "number", "format": "float" },
          "total_supply": { "type": "integer" },
          "swap_fee": { "type": "number", "format": "float" }
        }
      },
      "BalancerTokenWithWeight": {
        "type": "object",
        "properties": {
          "balance": { "type": "integer" },
          "contract_address": { "type": "string" },
          "logo_url": { "type": "string" },
          "contract_ticker_symbol": { "type": "string" },
          "contract_decimals": { "type": "integer", "format": "int32" },
          "quote": { "type": "number", "format": "float" },
          "quote_rate": { "type": "number", "format": "float" },
          "weight": { "type": "number", "format": "float" }
        }
      },
      "ContainerB": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BalancerBalanceItem" }
          }
        }
      },
      "ContainerC": {
        "type": "object",
        "properties": {
          "curve": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/cBalance" }
          }
        }
      },
      "ContractMetadataWithBalance": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "balance": { "type": "integer" },
          "quote": { "type": "number", "format": "float" },
          "quote_rate": { "type": "number", "format": "float" }
        }
      },
      "ContractMetadataWithBalanceSupply": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32",
            "example": 18
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "type": "string",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "balance": { "type": "integer" },
          "supply": { "type": "integer" },
          "fee": { "type": "integer" }
        }
      },
      "CurveBalanceResponseType": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "updated_at": { "type": "string", "format": "date-time" },
          "next_update_at": { "type": "string", "format": "date-time" },
          "quote_currency": { "type": "string" },
          "balancer": { "$ref": "#/components/schemas/ContainerC" }
        }
      },
      "cBalance": {
        "type": "object",
        "properties": {
          "pool": {
            "$ref": "#/components/schemas/ContractMetadataWithBalanceSupply"
          },
          "underlying": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractMetadataWithBalance"
            }
          }
        }
      },
      "AaveBalanceItem": {
        "type": "object",
        "properties": {
          "atoken_contract_address": { "type": "string" },
          "atoken_contract_ticker_symbol": { "type": "string" },
          "atoken_contract_name": { "type": "string" },
          "atoken_contract_decimals": { "type": "integer", "format": "int32" },
          "atoken_balance": { "type": "integer" },
          "borrow_balance": { "type": "integer" },
          "borrow_rate": { "type": "number", "format": "double" },
          "liquidity_rate": { "type": "number", "format": "double" },
          "origination_fee": { "type": "integer" },
          "peg_contract_decimals": { "type": "integer", "format": "int32" },
          "peg_contract_address": { "type": "string" },
          "peg_contract_ticker_symbol": { "type": "string" },
          "logo_url": { "type": "string" },
          "quote_rate": { "type": "number", "format": "float" },
          "quote": { "type": "number", "format": "float" },
          "borrow_quote": { "type": "number", "format": "float" }
        }
      },
      "AaveBalanceResponseType": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "updated_at": { "type": "string", "format": "date-time" },
          "next_update_at": { "type": "string", "format": "date-time" },
          "quote_currency": { "type": "string" },
          "aave": { "$ref": "#/components/schemas/ContainerA" }
        }
      },
      "ContainerA": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AaveBalanceItem" }
          }
        }
      },
      "Container": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UniswapV2BalanceItem" }
          }
        }
      },
      "UniswapBalanceWrapper": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UniswapV2BalanceItem" }
          }
        }
      },
      "UniswapV2ActivityItem": {
        "required": ["act", "act_at", "description", "tx_hash"],
        "type": "object",
        "properties": {
          "act_at": { "type": "string", "format": "date-time" },
          "act": {
            "type": "string",
            "enum": ["ADD_LIQUIDITY", "REMOVE_LIQUIDITY", "SWAP"]
          },
          "description": { "type": "string" },
          "tx_hash": { "type": "string" },
          "token_0": { "$ref": "#/components/schemas/UniswapToken" },
          "token_1": { "$ref": "#/components/schemas/UniswapToken" },
          "pool_token": {
            "$ref": "#/components/schemas/UniswapTokenWithSupply"
          }
        },
        "description": "The transactions."
      }
    },
    "securitySchemes": {
      "ApiKeyQueryAuth": { "type": "apiKey", "name": "key", "in": "query" }
    }
  },
  "servers": [{ "url": "https://api.covalenthq.com" }],
  "security": [{ "ApiKeyQueryAuth": [] }]
}
